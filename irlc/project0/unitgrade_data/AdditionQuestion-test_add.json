{"run_id": 776342, "state": "fail", "coverage_files_changed": null, "stdout": [[0, "\r * q1.1) Adding two numbers together:   0%|                                              | [00:00<?]\r                                                                                                    \r * q1.1) Adding two numbers together..............................................................................FAILED\n"]], "wz_stacktrace": "<div class=\"traceback\">\n  <h3>Traceback <em>(most recent call last)</em>:</h3>\n  <ul><li><div class=\"frame\" id=\"frame-2063437886656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\"</cite>,\n      line <em class=\"line\">59</em>,\n      in <code class=\"function\">testPartExecutor</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>@contextlib.contextmanager</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def testPartExecutor(self, test_case, isTest=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>old_success = self.success</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.success = True</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>yield</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except KeyboardInterrupt:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except SkipTest as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.success = False</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.skipped.append((test_case, str(e)))</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438458304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\"</cite>,\n      line <em class=\"line\">591</em>,\n      in <code class=\"function\">run</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>with outcome.testPartExecutor(self):</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>self._callSetUp()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if outcome.success:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>outcome.expecting_failure = expecting_failure</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>with outcome.testPartExecutor(self, isTest=True):</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>self._callTestMethod(testMethod)</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>outcome.expecting_failure = False</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>with outcome.testPartExecutor(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>self._callTearDown()</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.doCleanups()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438458416\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\unitgrade\\src\\unitgrade\\framework.py\"</cite>,\n      line <em class=\"line\">516</em>,\n      in <code class=\"function\">_callTestMethod</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>self._ensure_cache_exists()  # Make sure cache is there.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._testMethodDoc is not None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._cache_put((self.cache_id(), &#39;title&#39;), self.shortDescriptionStandard())</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self._cache2[(self.cache_id(), &#39;assert&#39;)] = {}</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>res = testMethod()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>elapsed = time.time() - t</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self._get_outcome()[ (self.cache_id(), &#34;return&#34;) ] = res</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self._cache_put((self.cache_id(), &#34;time&#34;), elapsed)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438458528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\project0\\fruit_project.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">test_add</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>class AdditionQuestion(UTestCase):</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&#34;&#34;&#34; Problem 1: Adding two numbers &#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def test_add(self):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34; Adding two numbers together &#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>self.assertEqual(add(2, 3), 5) # Test the add-function.</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.assertEqual(add(2, -917), -915) # Test the add-function.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>class MisterfyQuestion(UTestCase):</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>&#34;&#34;&#34; Problem 2: Misterfy a list &#34;&#34;&#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def test_misterfy(self):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438458640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\ex00\\fruit_homework.py\"</cite>,\n      line <em class=\"line\">5</em>,\n      in <code class=\"function\">add</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span># This file may not be shared/redistributed without permission. Please read copyright notice in the git repo. If this file contains other copyright notices disregard this text.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def add(a, b):</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&#34;&#34;&#34;  This function shuold return the sum of a and b. I.e. if print(add(2,3)) should print &#39;5&#39;. &#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># TODO: 1 lines missing.</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>raise NotImplementedError(&#34;Implement function body&#34;)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def misterfy(animals):</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>&#34;&#34;&#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>Given a list of animals like animals=[&#34;cat&#34;, &#34;wolf&#34;, &#34;elephans&#34;], this function should return</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>a list like [&#34;mr cat&#34;, &#34;mr wolf&#34;, &#34;mr elephant&#34;]  &#34;&#34;&#34;</pre></div>\n</div>\n</ul>\n  <blockquote>NotImplementedError: Implement function body\n</blockquote>\n</div>\n"}