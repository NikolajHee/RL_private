{"run_id": 533222, "state": "fail", "coverage_files_changed": null, "stdout": [[0, "\r * q4.1) fruits_ordered:   0%|                                                           | [00:00<?]\r                                                                                                    \r * q4.1) fruits_ordered...........................................................................................FAILED\n\u001b[31mTraceback (most recent call last):\n  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\", line 59, in testPartExecutor\n    yield\n  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"C:\\Users\\tuhe\\Documents\\unitgrade\\src\\unitgrade\\framework.py\", line 516, in _callTestMethod\n    res = testMethod()\n  File \"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\project0\\fruit_project.py\", line 40, in test_fruits_ordered\n    self.assertEqualC(list(sorted(fruits_ordered(order))))\n  File \"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\ex00\\fruit_homework.py\", line 24, in fruits_ordered\n    raise NotImplementedError(\"Implement function body\")\nNotImplementedError: Implement function body\n\u001b[37m"]], "wz_stacktrace": "<div class=\"traceback\">\n  <h3>Traceback <em>(most recent call last)</em>:</h3>\n  <ul><li><div class=\"frame\" id=\"frame-2063438533616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\"</cite>,\n      line <em class=\"line\">59</em>,\n      in <code class=\"function\">testPartExecutor</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>@contextlib.contextmanager</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def testPartExecutor(self, test_case, isTest=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>old_success = self.success</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.success = True</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>yield</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except KeyboardInterrupt:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except SkipTest as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.success = False</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.skipped.append((test_case, str(e)))</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438533504\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\"</cite>,\n      line <em class=\"line\">591</em>,\n      in <code class=\"function\">run</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>with outcome.testPartExecutor(self):</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>self._callSetUp()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if outcome.success:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>outcome.expecting_failure = expecting_failure</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>with outcome.testPartExecutor(self, isTest=True):</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>self._callTestMethod(testMethod)</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>outcome.expecting_failure = False</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>with outcome.testPartExecutor(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>self._callTearDown()</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.doCleanups()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438533840\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\unitgrade\\src\\unitgrade\\framework.py\"</cite>,\n      line <em class=\"line\">516</em>,\n      in <code class=\"function\">_callTestMethod</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>self._ensure_cache_exists()  # Make sure cache is there.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._testMethodDoc is not None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._cache_put((self.cache_id(), &#39;title&#39;), self.shortDescriptionStandard())</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self._cache2[(self.cache_id(), &#39;assert&#39;)] = {}</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>res = testMethod()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>elapsed = time.time() - t</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self._get_outcome()[ (self.cache_id(), &#34;return&#34;) ] = res</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self._cache_put((self.cache_id(), &#34;time&#34;), elapsed)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438533728\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\project0\\fruit_project.py\"</cite>,\n      line <em class=\"line\">40</em>,\n      in <code class=\"function\">test_fruits_ordered</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>&#34;&#34;&#34; Problem 4: The fruits_ordered function &#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def test_fruits_ordered(self):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34; fruits_ordered &#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>order = {&#39;apples&#39;: 1.0,</pre>\n<pre class=\"line before\"><span class=\"ws\">                 </span>&#39;oranges&#39;: 3.0}</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>self.assertEqualC(list(sorted(fruits_ordered(order))))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>order2 = {&#39;banana&#39;: 4,</pre>\n<pre class=\"line after\"><span class=\"ws\">                  </span>&#39;apples&#39;: 1.0,</pre>\n<pre class=\"line after\"><span class=\"ws\">                  </span>&#39;oranges&#39;: 3.0,</pre>\n<pre class=\"line after\"><span class=\"ws\">                  </span>&#39;pears&#39;: 4}</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.assertEqualC(list(sorted(fruits_ordered(order2))))</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438534064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\ex00\\fruit_homework.py\"</cite>,\n      line <em class=\"line\">24</em>,\n      in <code class=\"function\">fruits_ordered</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span># TODO: 1 lines missing.</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>raise NotImplementedError(&#34;Implement function body&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def fruits_ordered(order_dict):</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># TODO: 1 lines missing.</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>raise NotImplementedError(&#34;Implement function body&#34;)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>class BasicFruitShop:</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>&#34;&#34;&#34; This is a simple class that represents a fruit-shop.</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>You instantiate it with a dictionary of prices &#34;&#34;&#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __init__(self, name, prices):</pre></div>\n</div>\n</ul>\n  <blockquote>NotImplementedError: Implement function body\n</blockquote>\n</div>\n"}