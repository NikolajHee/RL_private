{"run_id": 558552, "state": "fail", "coverage_files_changed": null, "stdout": [[0, "\u001b[31mException in thread \u001b[37m\u001b[31mThread-6\u001b[37m\u001b[31m:\n\u001b[37m\u001b[31mTraceback (most recent call last):\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\threading.py\", line 1016, in _bootstrap_inner\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mself.run()\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\Documents\\unitgrade\\src\\unitgrade\\artifacts.py\", line 52, in run\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mself.empty_queue()\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\Documents\\unitgrade\\src\\unitgrade\\artifacts.py\", line 41, in empty_queue\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mcq = self.db.get('stdout')\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pupdb\\core.py\", line 88, in get\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mdatabase = self._get_database()\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pupdb\\core.py\", line 54, in _get_database\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mdatabase = json.loads(db_file.read())\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\__init__.py\", line 346, in loads\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mreturn _default_decoder.decode(s)\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py\", line 337, in decode\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mobj, end = self.raw_decode(s, idx=_w(s, 0).end())\u001b[37m\u001b[31m\n\u001b[37m\u001b[31m  File \"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py\", line 355, in raw_decode\n\u001b[37m\u001b[31m    \u001b[37m\u001b[31mraise JSONDecodeError(\"Expecting value\", s, err.value) from None\u001b[37m\u001b[31m\n\u001b[37m\u001b[31mjson.decoder\u001b[37m\u001b[31m.\u001b[37m\u001b[31mJSONDecodeError\u001b[37m\u001b[31m: \u001b[37m\u001b[31mExpecting value: line 1 column 1 (char 0)\u001b[37m\u001b[31m\n\u001b[37m"]], "wz_stacktrace": "<div class=\"traceback\">\n  <h3>Traceback <em>(most recent call last)</em>:</h3>\n  <ul><li><div class=\"frame\" id=\"frame-2063438533616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\"</cite>,\n      line <em class=\"line\">59</em>,\n      in <code class=\"function\">testPartExecutor</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>@contextlib.contextmanager</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def testPartExecutor(self, test_case, isTest=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>old_success = self.success</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.success = True</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>yield</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except KeyboardInterrupt:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except SkipTest as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.success = False</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.skipped.append((test_case, str(e)))</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438533504\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py\"</cite>,\n      line <em class=\"line\">591</em>,\n      in <code class=\"function\">run</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>with outcome.testPartExecutor(self):</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>self._callSetUp()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if outcome.success:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>outcome.expecting_failure = expecting_failure</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>with outcome.testPartExecutor(self, isTest=True):</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>self._callTestMethod(testMethod)</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>outcome.expecting_failure = False</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>with outcome.testPartExecutor(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>self._callTearDown()</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.doCleanups()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438533840\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\unitgrade\\src\\unitgrade\\framework.py\"</cite>,\n      line <em class=\"line\">516</em>,\n      in <code class=\"function\">_callTestMethod</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>self._ensure_cache_exists()  # Make sure cache is there.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._testMethodDoc is not None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._cache_put((self.cache_id(), &#39;title&#39;), self.shortDescriptionStandard())</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self._cache2[(self.cache_id(), &#39;assert&#39;)] = {}</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>res = testMethod()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>elapsed = time.time() - t</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self._get_outcome()[ (self.cache_id(), &#34;return&#34;) ] = res</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self._cache_put((self.cache_id(), &#34;time&#34;), elapsed)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438533728\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\project0\\fruit_project.py\"</cite>,\n      line <em class=\"line\">16</em>,\n      in <code class=\"function\">test_misterfy</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>class MisterfyQuestion(UTestCase):</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&#34;&#34;&#34; Problem 2: Misterfy a list &#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def test_misterfy(self):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34; Add &#39;mr&#39; in front of each item in a string &#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>self.assertEqualC(misterfy([&#39;dog&#39;, &#39;cat&#39;, &#39;lion&#39;]))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.assertEqualC(misterfy([&#39;giraffe&#39;]))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.assertEqualC(misterfy([]))</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>class MeanOfDie(UTestCase):</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>&#34;&#34;&#34; Problem 3: Mean of die &#34;&#34;&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2063438534064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\tuhe\\Documents\\02465students\\irlc\\ex00\\fruit_homework.py\"</cite>,\n      line <em class=\"line\">12</em>,\n      in <code class=\"function\">misterfy</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>def misterfy(animals):</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>Given a list of animals like animals=[&#34;cat&#34;, &#34;wolf&#34;, &#34;elephans&#34;], this function should return</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>a list like [&#34;mr cat&#34;, &#34;mr wolf&#34;, &#34;mr elephant&#34;]  &#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># TODO: 1 lines missing.</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>raise NotImplementedError(&#34;Implement function body&#34;)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def mean_value(p_dict):</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>&#34;&#34;&#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>Given a dictionary of the form: {x: probability_of_x, ...} compute the mean value of</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>x, i.e. sum_i x_i * p(x_i). The recommended way is to use list comprehension and not numpy.</pre></div>\n</div>\n</ul>\n  <blockquote>NotImplementedError: Implement function body\n</blockquote>\n</div>\n"}